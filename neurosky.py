"""This script tries to access neurosky to record eeg data. Non-LSL version.
Based on: https://github.com/D1o0g9s/EEGFaceDetection/blob/master/mindwave_code/CollectRawData.py
Notes:
- requires mindwave.py
- change the line labeled "mac version" to run it on other OS
- run by typing 'python neurosky.py' in the terminal or console
- configure your experimental settings under SETTINGS
- trial_permutations are randomly sampled from TARGETS by default
- the recorded data are saved under ./[SUBJECT_NUMBER]/[SESSION_NUMBER]/
"""

## IMPORTS
import mindwave, time
import time
import pandas as pd
from random import choices
import os
from os.path import join as pjoin

##########################################################################
##########################################################################

## SETTINGS
SUBJECT_NUMBER = 0
SESSION_NUMBER = 0
TRIAL_DURATION = 2000 # ms
NUM_TRIALS = 2 # number of trials in total
SAMPLING_FREQUENCY = 128 # Hz
INTER_TRIAL_INTERVAL = 1000 # ms, between trials

TARGETS = {1:'task1', 2:'task2'}  
                    # classication labels, eg. {1:'task1', 2:'task2'}
                    # NOTE: 0 is reserverd for 'rest'. Unless you just
                    # want to record 'rest' for the entire session, you
                    # should not include the key 0 in this dictionary

### PATHS
BASE_PATH = "./"
DATA_PATH = pjoin(pjoin(BASE_PATH, str(SUBJECT_NUMBER)),str(SESSION_NUMBER))
if not os.path.isdir(DATA_PATH):
    os.makedirs(DATA_PATH)

##########################################################################
##########################################################################

## FUNCTIONS
def on_raw(headset, rawvalue):
    (eeg, attention) = (headset.raw_value, headset.attention)

    global label
    global currentAttention
    
    ts = time.time()
    data['timestamp'].append(ts)
    data['raw_value'].append(eeg)
    data['attention'].append(attention)
    data['label'].append(label)

def print_seconds_elapsed():
    # Print "second elapsed" every second
    global stime
    timeDiff = time.time()-stime
    if timeDiff % 1 < 1/SAMPLING_FREQUENCY: 
        print("seconds elapsed: " + str(int(timeDiff)))

##########################################################################
##########################################################################
# if this script is run as a script rather than imported
if __name__ == "__main__": 

    ###############################################################
    # if the trial permutation is generated by the gui,           
    # then you should load the permutation from the gui instead   
    trial_permutation = choices(list(TARGETS.keys()), k = NUM_TRIALS) # random trial generation
    ###############################################################

    secondsToSample = NUM_TRIALS * (TRIAL_DURATION/1000 + INTER_TRIAL_INTERVAL/1000)
    filename = pjoin(DATA_PATH, 'eeg.csv')
    currentTimestamp = None
    currentRawValue = None
    currentAttention = None
    label = 0

    trial_index = 0 # the first trial in the permutation

    data = {'timestamp': [],
            'raw_value': [],
            'attention': [],
            'label':[]}

    print("Connecting...")
    headset = mindwave.Headset('/dev/tty.MindWaveMobile-SerialPo') # mac version
    print("Connected!")

    try:
        print("Starting...")
        while (headset.poor_signal > 5 or headset.attention == 0):
            # print("Headset signal noisy %d. Adjust the headset and the earclip." % (headset.poor_signal))
            time.sleep(0.1)
            
        print("Started! Writing %d seconds output to %s" % (secondsToSample,filename))
        stime = time.time()
        trial_stime = time.time()
        headset.raw_value_handlers.append( on_raw )
        prevTime = 0
        print(TARGETS[trial_permutation[trial_index]], TRIAL_DURATION/1000)
        while ((time.time()-stime)<secondsToSample):
            if headset.poor_signal > 5 :
                print("Headset signal noisy %d. Adjust the headset and the earclip." % (headset.poor_signal))

            # print_seconds_elapsed()

            # Track trial time and change label
            if time.time()-trial_stime < TRIAL_DURATION/1000:
                label = trial_permutation[trial_index]
            else:
                label = 0 # 0 means inter-trial interval or rest
            if time.time()-trial_stime >= TRIAL_DURATION/1000 + INTER_TRIAL_INTERVAL/1000:
                trial_stime = time.time()
                if trial_index < len(trial_permutation): # increment trial index to next trial
                    trial_index += 1
                    print(TARGETS[trial_permutation[trial_index]], TRIAL_DURATION/1000)

            time.sleep(1/SAMPLING_FREQUENCY) # wait till the start of next sample
            pass
    finally:
        df = pd.DataFrame.from_dict(data)
        df.to_csv(filename, index=False)

        headset.stop()
        print("Stopped!")